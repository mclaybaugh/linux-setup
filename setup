#!/bin/sh
# Author: Michael Claybaugh
# Description: Shell script for automating the setup of my prefered linux
#              programs and settings

installNorms() {
  # git info setup
  git config --global user.name "Michael Claybaugh"
  git config --global user.email "mclaybaugh2@liberty.edu"

  # vim-plug
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  echo "After this setup, open vim and type :PlugInstall"

  # bash setup ** zsh is my current shell of choice
  #git clone https://github.com/magicmonty/bash-git-prompt ../bash-git-prompt

  # zsh setup
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  git clone https://github.com/olivierverdier/zsh-git-prompt ../zsh-git-prompt

  # install nvm
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash

  # haskell stack required for zsh-git-prompt and haskell is amazing anyway
#  curl -sSL https://get.haskellstack.org/ | sh
#  cd ../zsh-git-prompt || exit
#  stack setup
#  stack build && stack install
#  cd ../linux-setup || exit
}

installUbuntuNorms() {
  # general
  sudo apt install build-essential curl wget ranger zsh

  # fonts
  fonts-powerline fonts-firacode

  # javascript dev
  sudo apt install npm nodejs

  # docker
  sudo apt install docker docker-compose

  # linting
  sudo apt install php shellcheck
  sudo npm install --global eslint

  # smb
  sudo apt install cifs-utils

  # neovim
  sudo apt install neovim

  # vim copy/paste, ctags, fzf
  sudo apt install xclip universal-ctags fzf

  # local dev
  sudo apt install apache mysql php php-dev

  # sqlsrv
  sudo apt install unixodbc unixodbc-dev php-pear
  ## check version of sqlsrv from github
  # sudo pecl install sqlsrv-5.11.0
  # sudo pecl install pdo_sqlsrv-5.11.0

  installNorms
}

installMacNorms() {
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  brew install ranger wget shellcheck nodejs neovim
  installNorms
}

cloneBuildNeovim() {
  echo "SETUP: Install prerequisites..."
  sudo apt install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
  echo "SETUP: Clone repository..."
  git clone https://github.com/neovim/neovim ../neovim
  echo "SETUP: Build and install..."
  cd ../neovim || exit
  make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/neovim" CMAKE_BUILD_TYPE=Release
  make install
  cd ../linux-setup || exit
}

copyConfigs() {
  REPO_HOME="$HOME/repositories/linux-setup"
  VIM_CONFIG_DIR=~/.config/nvim
  cp -v "$REPO_HOME/config/bashrc" "$HOME/.bashrc"
  cp -v "$REPO_HOME/config/zshrc" "$HOME/.zshrc"
  cp -v "$REPO_HOME/config/git-prompt-colors.sh" "$HOME/.git-prompt-colors.sh"
  cp -v "$REPO_HOME/config/eslintrc.json" "$HOME/.eslintrc.json"
  if [ ! -d "$VIM_CONFIG_DIR" ]; then
    mkdir -p $VIM_CONFIG_DIR
  fi
  cp -v "$REPO_HOME/config/vimrc" "$VIM_CONFIG_DIR/init.vim"
}

sshFolderPerms() {
  sudo chmod -v 700 ~/.ssh
  sudo chmod -v 644 ~/.ssh/*.pub
  sudo chmod -v 600 ~/.ssh/*.id_rsa
  sudo chmod -v 600 ~/.ssh/id_rsa
  sudo chmod -v 600 ~/.ssh/config
}

showCommands() {
  echo ""
  echo "Available commands:"
  echo "    ubuntu, mac, neovim, configs, sshPerms, exit"
  echo ""
}

TASK="start"
if [ "$1" = 'configs' ]; then
  copyConfigs
exit 0
fi

echo "Setup by Michael Claybaugh, type 'help' for available commands or 'exit' to quit";

while [ "$TASK" != "exit" ]; do
  printf "SETUP> "
  read -r TASK

  case $TASK in
    "exit")
      echo "Peace out";;
    "ubuntu")
      installUbuntuNorms;;
    "mac")
      installMacNorms;;
    "neovim")
      cloneBuildNeovim;;
    "configs")
      copyConfigs;;
    "sshPerms")
      sshFolderPerms;;
    "help")
      showCommands;;
    *)
      echo "Invalid option"
  esac
done
